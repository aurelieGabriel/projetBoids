//****************************************************************************
//
//
//
//****************************************************************************


 
 
// ===========================================================================
//                                   Libraries
// ===========================================================================



// ===========================================================================
//                                 Project Files
// ===========================================================================
#include "Predateur.h"
#include "bwindow.h"
#include "Agent.h"
#include <math.h>


//############################################################################
//                                                                           #
//                           Class Predateur                                 #
//                                                                           #
//############################################################################

const double Predateur::Rp = 80;


// ===========================================================================
//                         Definition of static attributes
// ===========================================================================

// ===========================================================================
//                                  Constructors
// ===========================================================================
Predateur::Predateur(void)
{
 
  x=(rand()/(double)RAND_MAX)*640;
  y=(rand()/(double)RAND_MAX)*480;
  isObstacle=false;
  isPredateur=true;
  vx=10 ;
  vy=-10 ;
  a=51;

}

// ===========================================================================
//                                  Destructor
// ===========================================================================
Predateur::~Predateur(void)
{
}

// ===========================================================================
//                                 Public Methods
// ===========================================================================

void Predateur::velocityPredator()
{
	double vMax=1.5;

	  
      vx +=(rand()/(double)RAND_MAX)*2 -1;
      vy +=(rand()/(double)RAND_MAX)*2-1;
      double normV = sqrt(vx*vx+vy*vy);
      if(normV>vMax)
      {
		  vx=vx/(normV/vMax);
		  vy=vy/(normV/vMax);
	  }

}
void Predateur::attente()
{
	vx = 0;
    vy = 0;
	a ++;
}

bool Predateur::peutBouger()
{
	bool b;
	if(a >50)
	{
		b=true;
	}
	else
	{
		b=false;
	}
	return b;
}


